version: '3.1'
services:
  database:
    image: blainehansen/micro-chimp:postgres
    ports:
      - "5432:5432"
    tty: true
    environment:
      - POSTGRES_DB=database
      - POSTGRES_USER_FILE=/run/secrets/admin_postgres_user_file
      - POSTGRES_PASSWORD_FILE=/run/secrets/admin_postgres_password_file
    # volumes:
    #   - ./postgres-data:/var/lib/postgresql/data
    command: postgres -c 'max_wal_size=2GB'
    secrets:
      - admin_postgres_user_file
      - admin_postgres_password_file
      - server_postgres_password_file

  api:
    image: blainehansen/micro-chimp
    depends_on:
      - database
    ports:
      - "5050:5050"
    tty: true
    environment:
      - MAILGUN_AUTH_FILE=/run/secrets/mailgun_auth_file
      - POSTGRES_PASSWORD_FILE=/run/secrets/server_postgres_password_file
    secrets:
      - mailgun_auth_file
      - server_postgres_password_file

secrets:
  mailgun_auth_file:
    file: .secret.mailgun_auth_file
  admin_postgres_user_file:
    file: .secret.admin_postgres_user_file
  admin_postgres_password_file:
    file: .secret.admin_postgres_password_file
  server_postgres_password_file:
    file: .secret.server_postgres_password_file

# https://www.digitalocean.com/community/tutorials/how-to-self-host-reviewninja-on-digitalocean-using-docker-and-coreos
# https://docs.docker.com/engine/swarm/secrets/
# https://hackernoon.com/finally-you-can-share-docker-machines-without-a-script-8f946d050f7
# https://www.digitalocean.com/community/tutorials/how-to-secure-a-containerized-node-js-application-with-nginx-let-s-encrypt-and-docker-compose
